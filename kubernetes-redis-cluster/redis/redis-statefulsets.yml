apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis
  replicas: 3
  selector:
    matchLabels:
      ramos-app: rma-redis # MUST be the same of the "Pod" Labels

  # this is the Template of the Redis Pod
  template:
    metadata:
      labels:
        ramos-app: rma-redis
    spec:
      initContainers:
      - name: config
        image: redis:7.2-alpine
        command: [ "sh", "-c" ]
        args:
          - |
            # *** COPYING mounted "/tmp/redis/redis.conf" file to Containers "/etc/redis/redis.conf" file ***
            cp /tmp/redis/redis.conf /etc/redis/redis.conf
            
            echo "finding master..."
            MASTER_FDQN=`hostname  -f | sed -e 's/redis-[0-9]\./redis-0./'`
            if [ "$(redis-cli -h sentinel -p 5000 ping)" != "PONG" ]; then
              echo "master not found, defaulting to redis-0"

              if [ "$(hostname)" = "redis-0" ]; then
                echo "this is redis-0, not updating config..."
              else
                echo "updating redis.conf..."
                echo "replicaof $MASTER_FDQN 6379" >> /etc/redis/redis.conf
              fi
            else
              echo "sentinel found, finding master"
              MASTER="$(redis-cli -h sentinel -p 5000 sentinel get-master-addr-by-name mymaster | grep -E '(^redis-\d{1,})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})')"
              echo "master found : $MASTER, updating redis.conf"
              echo "replicaof $MASTER 6379" >> /etc/redis/redis.conf
            fi
        volumeMounts:
        - name: redis-config-container # basically copying "./redis/redis-configmap.yml" File's Content in "/etc/redis/" Directory, then we Overwrite it in the Runtime by copy "/tmp/redis/" Directory from the Below "mountPath"
          mountPath: /etc/redis/
        - name: config
          mountPath: /tmp/redis/

      containers:
      - name: redis
        image: redis:7.2-alpine
        command: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: data
          mountPath: /data
        - name: redis-config-container # MUST match the "volumes" and of "initContainers"
          mountPath: /etc/redis/
      
      # this is on the same Vertical Line as "containers" and "initContainers", as "volumes" are totally Pod Specific and all the Containers can access it via this
      volumes:
      - name: redis-config-container
        emptyDir: {} # we want this to be Generated by the "initContainers" as, "/etc/redis/redis.conf" file changes when a New master gets elected
      - name: config
        configMap:
          name: redis-config # This name Must match what is defined in "./redis/redis-configmap.yml" file
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard" # we put Output Name of this command --> "kubectl get storageclass"
      resources:
        requests:
          storage: 64Mi
---
# "---" represents another File, but writing in the Same File
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  clusterIP: None # clusterIP: None --> means Each individual Pod will get their OWN IP address via "Service" and we will be able to access Each Redis Pod in the Cluster
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    ramos-app: rma-redis